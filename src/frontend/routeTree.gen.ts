/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as IndexImport } from './routes/index'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as DashboardMonitorsIndexImport } from './routes/dashboard/monitors/index'
import { Route as DashboardLogsIndexImport } from './routes/dashboard/logs/index'
import { Route as DashboardWorkspacesNewIndexImport } from './routes/dashboard/workspaces/new/index'
import { Route as DashboardMonitorsNewIndexImport } from './routes/dashboard/monitors/new/index'
import { Route as DashboardMonitorsIdIndexImport } from './routes/dashboard/monitors/$id/index'
import { Route as DashboardMonitorsIdEditIndexImport } from './routes/dashboard/monitors/$id/edit/index'

// Create/Update Routes

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const DashboardMonitorsIndexRoute = DashboardMonitorsIndexImport.update({
  id: '/monitors/',
  path: '/monitors/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardLogsIndexRoute = DashboardLogsIndexImport.update({
  id: '/logs/',
  path: '/logs/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardWorkspacesNewIndexRoute =
  DashboardWorkspacesNewIndexImport.update({
    id: '/workspaces/new/',
    path: '/workspaces/new/',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

const DashboardMonitorsNewIndexRoute = DashboardMonitorsNewIndexImport.update({
  id: '/monitors/new/',
  path: '/monitors/new/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardMonitorsIdIndexRoute = DashboardMonitorsIdIndexImport.update({
  id: '/monitors/$id/',
  path: '/monitors/$id/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const DashboardMonitorsIdEditIndexRoute =
  DashboardMonitorsIdEditIndexImport.update({
    id: '/monitors/$id/edit/',
    path: '/monitors/$id/edit/',
    getParentRoute: () => DashboardRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/logs/': {
      id: '/dashboard/logs/'
      path: '/logs'
      fullPath: '/dashboard/logs'
      preLoaderRoute: typeof DashboardLogsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/monitors/': {
      id: '/dashboard/monitors/'
      path: '/monitors'
      fullPath: '/dashboard/monitors'
      preLoaderRoute: typeof DashboardMonitorsIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/monitors/$id/': {
      id: '/dashboard/monitors/$id/'
      path: '/monitors/$id'
      fullPath: '/dashboard/monitors/$id'
      preLoaderRoute: typeof DashboardMonitorsIdIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/monitors/new/': {
      id: '/dashboard/monitors/new/'
      path: '/monitors/new'
      fullPath: '/dashboard/monitors/new'
      preLoaderRoute: typeof DashboardMonitorsNewIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/workspaces/new/': {
      id: '/dashboard/workspaces/new/'
      path: '/workspaces/new'
      fullPath: '/dashboard/workspaces/new'
      preLoaderRoute: typeof DashboardWorkspacesNewIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/dashboard/monitors/$id/edit/': {
      id: '/dashboard/monitors/$id/edit/'
      path: '/monitors/$id/edit'
      fullPath: '/dashboard/monitors/$id/edit'
      preLoaderRoute: typeof DashboardMonitorsIdEditIndexImport
      parentRoute: typeof DashboardRouteImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteRouteChildren {
  DashboardLogsIndexRoute: typeof DashboardLogsIndexRoute
  DashboardMonitorsIndexRoute: typeof DashboardMonitorsIndexRoute
  DashboardMonitorsIdIndexRoute: typeof DashboardMonitorsIdIndexRoute
  DashboardMonitorsNewIndexRoute: typeof DashboardMonitorsNewIndexRoute
  DashboardWorkspacesNewIndexRoute: typeof DashboardWorkspacesNewIndexRoute
  DashboardMonitorsIdEditIndexRoute: typeof DashboardMonitorsIdEditIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardLogsIndexRoute: DashboardLogsIndexRoute,
  DashboardMonitorsIndexRoute: DashboardMonitorsIndexRoute,
  DashboardMonitorsIdIndexRoute: DashboardMonitorsIdIndexRoute,
  DashboardMonitorsNewIndexRoute: DashboardMonitorsNewIndexRoute,
  DashboardWorkspacesNewIndexRoute: DashboardWorkspacesNewIndexRoute,
  DashboardMonitorsIdEditIndexRoute: DashboardMonitorsIdEditIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/dashboard/logs': typeof DashboardLogsIndexRoute
  '/dashboard/monitors': typeof DashboardMonitorsIndexRoute
  '/dashboard/monitors/$id': typeof DashboardMonitorsIdIndexRoute
  '/dashboard/monitors/new': typeof DashboardMonitorsNewIndexRoute
  '/dashboard/workspaces/new': typeof DashboardWorkspacesNewIndexRoute
  '/dashboard/monitors/$id/edit': typeof DashboardMonitorsIdEditIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/dashboard/logs': typeof DashboardLogsIndexRoute
  '/dashboard/monitors': typeof DashboardMonitorsIndexRoute
  '/dashboard/monitors/$id': typeof DashboardMonitorsIdIndexRoute
  '/dashboard/monitors/new': typeof DashboardMonitorsNewIndexRoute
  '/dashboard/workspaces/new': typeof DashboardWorkspacesNewIndexRoute
  '/dashboard/monitors/$id/edit': typeof DashboardMonitorsIdEditIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/dashboard/logs/': typeof DashboardLogsIndexRoute
  '/dashboard/monitors/': typeof DashboardMonitorsIndexRoute
  '/dashboard/monitors/$id/': typeof DashboardMonitorsIdIndexRoute
  '/dashboard/monitors/new/': typeof DashboardMonitorsNewIndexRoute
  '/dashboard/workspaces/new/': typeof DashboardWorkspacesNewIndexRoute
  '/dashboard/monitors/$id/edit/': typeof DashboardMonitorsIdEditIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/auth/login'
    | '/dashboard/logs'
    | '/dashboard/monitors'
    | '/dashboard/monitors/$id'
    | '/dashboard/monitors/new'
    | '/dashboard/workspaces/new'
    | '/dashboard/monitors/$id/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/auth/login'
    | '/dashboard/logs'
    | '/dashboard/monitors'
    | '/dashboard/monitors/$id'
    | '/dashboard/monitors/new'
    | '/dashboard/workspaces/new'
    | '/dashboard/monitors/$id/edit'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/auth/login'
    | '/dashboard/logs/'
    | '/dashboard/monitors/'
    | '/dashboard/monitors/$id/'
    | '/dashboard/monitors/new/'
    | '/dashboard/workspaces/new/'
    | '/dashboard/monitors/$id/edit/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  AuthLoginRoute: typeof AuthLoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  AuthLoginRoute: AuthLoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard",
        "/auth/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/logs/",
        "/dashboard/monitors/",
        "/dashboard/monitors/$id/",
        "/dashboard/monitors/new/",
        "/dashboard/workspaces/new/",
        "/dashboard/monitors/$id/edit/"
      ]
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/dashboard/logs/": {
      "filePath": "dashboard/logs/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/monitors/": {
      "filePath": "dashboard/monitors/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/monitors/$id/": {
      "filePath": "dashboard/monitors/$id/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/monitors/new/": {
      "filePath": "dashboard/monitors/new/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/workspaces/new/": {
      "filePath": "dashboard/workspaces/new/index.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/monitors/$id/edit/": {
      "filePath": "dashboard/monitors/$id/edit/index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
